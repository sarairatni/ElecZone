// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  ProductID   Int            @id @default(autoincrement())
  Name        String
  Description String
  Price       Float
  ImgUrl      String?
  CategoryID  Int
  Category    Category       @relation(fields: [CategoryID], references: [CategoryID], onDelete: Cascade)
  CartProducts CartProduct[] 
  OrderItems  OrderItem[]    // Relation avec les commandes
}

model Category {
  CategoryID  Int       @id @default(autoincrement())
  Name        String    @unique
  Products    Product[] 
}

model User {
  id          Int            @id @default(autoincrement())
  fname       String
  lastname    String
  email       String         @unique
  hashedPsw   String
  role        Role           @default(COSTUMER)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  CartProducts CartProduct[] 
  Orders      Order[]
}

enum Role {
  ADMIN
  COSTUMER
}

model CartProduct {
  id         Int     @id @default(autoincrement())
  productId  Int
  customerId Int
  quantity   Int

  Product    Product  @relation(fields: [productId], references: [ProductID], onDelete: Cascade)
  User       User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Order {
  id            Int       @id @default(autoincrement())
  customerFname String
  customerLname String
  customerPhone String
  customerId    Int
  wilaya        String
  commune       String
  postalCode    String?
  detailedAddress String
  totalPrice    Float
  status        OrderStatus @default(PENDING)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  User          User      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  OrderItems    OrderItem[] // Relation avec les produits de la commande
}

// Nouveau mod√®le pour lier les commandes aux produits
model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  unitPrice Float   // Prix unitaire au moment de la commande
  totalPrice Float  // Prix total pour ce produit (quantity * unitPrice)

  Order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product   Product @relation(fields: [productId], references: [ProductID],  onDelete: Cascade)

  @@unique([orderId, productId])
}

enum OrderStatus {
  PENDING
  ACCEPTED
  DELIVERED
}